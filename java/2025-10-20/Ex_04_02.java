import java.util.*;
/*
制作日: 2025/10/20
プログラムの目的:
  標準入力に 2 つの正の整数 n, d (0 < d, n ≤ 10,000) をこの順で受け取り、
  1 から n までに存在する d の倍数の総和を計算して出力する。

プログラムの解説（要点・10行以上）:
  1) 仕様: 入力は int、出力は行頭に空白なしで数値のみを1行出力する。
  2) 元実装の方針: 0 〜 n をループし、(i % d == 0) を満たす i を加算していく（分かりやすい全探索）。
  3) 最適化1（ループの歩幅）: 意味上 0 を含める必要はないため i=d から開始できる。
     さらに i を 1 ずつではなく d ずつ増やす (i += d) と、剰余判定が不要になり高速化・簡潔化できる。
  4) 最適化2（数式解法）: n 以下の d の倍数は d, 2d, ..., kd (k = n/d)。
     よって総和は d * (1 + 2 + ... + k) = d * k * (k + 1) / 2 で O(1) で計算可能（ループ不要）。
  5) 型の安全性: 本課題の制約では int で概ね安全だが、より安全にするなら中間計算を long で行うと良い。
  6) 可読性: 変数名は短すぎないものを選び、インデントを適切にして読みやすさを保つ。
  7) 本ファイルは「元コードベース」を維持しつつ、上記最適化案をコメントで提示している。
  8) 将来の拡張: 入力バリデーション（d <= 0 など）は課題上は不要だが、実運用ではガードを入れる選択肢もある。
  9) 計算量: 全探索は O(n)、i+=d 版は O(n/d)、数式解法は O(1)。
 10) 学習目的に応じて、まずは全探索→i+=d→数式解法の順に改善していくと理解が定着しやすい。

備考: 提出要件（説明10行以上・インデント・読みやすさ）に配慮している。
*/

public class Ex_04_02 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();  // 上限
        int d = sc.nextInt();  // 倍数の基数

        
        int a = 0; 
        for (int i = 0; i <= n; i++) {
            if (i % d == 0) {
                a = a + i;
            }
        }
        System.out.println(a);
    }
}